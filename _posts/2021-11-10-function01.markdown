---
title: "python 함수"
toc: true
toc_sticky: true
excerpt_separator: "<!--more-->"
author_profile: true
sidebar:
  nav: "main"
categories:
  - Post Formats
tags:
   - python
---

# 함수 funsion

```
def 함수명(매개변수):
    <수행할 문장1>
    <수행할 문장2>
    ...
    return 결과값
```



# 지역변수 전역변수

지역변수 :  한정된 지역에서만 사용

전역변수 : 프로그램 전체에서 사용

![지역변수,전역변수](C:\Users\mk\Desktop\유비온 교육\python\정리 마크다운\지역변수,전역변수.png)

## global 

```
def func1() :
    global a
    a=10
    print(f"func1에서 a값 {a}")

def func2() :
    print(f"func1에서 a값 {a}")


a=20
func1()
func2()
```

## pass : 실행할 코드가 없는 것으로 다음 행동을 계속해서 진행합니다.

```
for i in range(10):
    if i % 2 == 0:
        pass
        print(i)    
    else:
        print(i)
print("Done")

0 1 2 3 4 5 6 7 8 9 done
```

## continue : 바로 다음 순번의 loop를 수행합니다.

```
for i in range(10):
    if i % 2 == 0:
        continue
        print(i)    
    print(i)
print("Done")

1 3 5 7 9 done
```



## break : 반복문을 멈추고 loop 밖으로 나가도록합니다.

```
for i in range(10):
    if i % 2 == 0:
        break
        print(i)    
    else:
        print(i)
print("Done")

done
```



## 입력값이 몇개가 될지 모를때

```
def 함수이름(*매개변수): 
    <수행할 문장>
    ...
```

## 키워드 파라미너 kwargs

```
>>> def 함수이름(**매개변수):
...     <수행할 문장>
...
```

키워드를 매개변수로 불러온다.



# 모듈

## 불러오기 2가지 방법

```
import 모듈
```

```
from 모듈 import 이름
```

첫번째 방법은 모듈 전체를 가져오는 방법

두번째 방법은 모듈 내에서 필요한 것만 가져오는 방법

## 불러온모듈이 필요없을때

```
del 모듈
```



## 거북이 글자그리기

```
import random
from tkinter.simpledialog import *
from tkinter import Tk


root = Tk()
root.withdraw()

def getString() :
    retStr = ''
    retStr = askstring('문자열 입력', '거북이 쓸 문자열을 입력')
    return retStr

def getRGB() :
    r,g,b  = 0, 0, 0
    r = random.random()
    g = random.random()
    b = random.random()
    return (r,g,b)

def getXYAS(sw , sh) :
    x , y , angle, size = 0,0,0,0
    x = random.randrange(-sw / 2 , sw / 2)
    y = random.randrange(-sh / 2 , sh / 2)
    angle = random.randrange(0 , 360)
    size = random.randrange(10 , 50)
    return [ x , y , angle, size]

#print(getString())
```



```
from myTutle import *
import turtle

inStr = ''
swidth ,sheight = 300, 300
tX , tY, tAngle, tSize = [0]*4

#메인코드
turtle.title('거북이 글자쓰기버전(모듈버전)')
turtle.shape('turtle')
turtle.setup(width = swidth +50 , height= sheight + 50)
turtle.screensize(swidth,sheight)
turtle.penup()
turtle.speed(5)
inStr = getString()

for ch in inStr :
    tX, tY , tAngle, txtSize = getXYAS(swidth , sheight)
    r,g,b = getRGB()

    turtle.goto(tX, tY)
    turtle.left(tAngle)

    turtle.pencolor((r,g,b))
    turtle.write(ch , font = ('맑은고딕',txtSize ,'bold'))

turtle.done()
```





## 람다

일반적인 함수형태

```
>>> (lambda x,y: x + y)(10, 20)
30
```



## map

```
map(함수, 리스트)
```

함수는 함수와 리스트를 인자로 받습니다.  리스트로부터 원소를 하나씩 꺼내서 함수를 적용시킨 다음, 그 결과를 새로운 리스트에 담아줌.

```
>>> map(lambda x: x ** 2, range(5))             # 파이썬 2
[0, 1, 4, 9, 16]  
>>> list(map(lambda x: x ** 2, range(5)))     # 파이썬 2 및 파이썬 3
[0, 1, 4, 9, 16]
```

## reduce

```
reduce(함수, 시퀀스)
```

형식은 위와 같구요, 시퀀스(문자열, 리스트, 튜플)의 원소들을 누적적으로 함수에 적용시킴

```
>>> from functools import reduce   # 파이썬 3에서는 써주셔야 해요  
>>> reduce(lambda x, y: x + y, [0, 1, 2, 3, 4])
10
```

## filter

```
filter(함수, 리스트)
```

원소들을 함수에 적용시켜서 결과가 참인 값들로 새로운 리스트를 만들어줍니다.

```
>>> filter(lambda x: x < 5, range(10))       # 파이썬 2
[0, 1, 2, 3, 4]  
>>> list(filter(lambda x: x < 5, range(10))) # 파이썬 2 및 파이썬 3
[0, 1, 2, 3, 4]
```



# 재귀함수

자신이 자신을 호출

```
def countdown(n):
    if n == 0:
        print("Blastoff!")
    else:
        print(n)
        countdown(n-1)
        
>>> countdown(3)
3
2
1
Blastoff!
```





# yield

yield 문 : 함수를 종결하지 않으면서 값을 계속 반환

```
def number_generator():
    yield 0
    yield 1
    yield 2
 
for i in number_generator():
    print(i)
    
0
1
2
```



# 클래스

객체 지향적 <--> 절차 지향적

프로퍼티,매소드로 구성

self

참고 사이트  <https://wikidocs.net/28>