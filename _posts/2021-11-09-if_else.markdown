---
title: "if_else elif for while 자료형"
toc: true
toc_sticky: true
excerpt_separator: "<!--more-->"
author_profile: true
sidebar:
  nav: "main"
categories:
  - Post Formats
tags:
   - python
---


# if-else문

```python
a = int(input("숫자를 입력하세요"))

if a< 100 :
    print(f"{a}는 100보다 작군요")
elif a == 100 :
    print(f"{a}는 100과 같군요")
else :
    print(f"{a}는 100보다 크군요")
```

# 삼항연산자  

if의 값이 참이면 true_value 거짓이면 false_value

```python
[true_value] if [condition] else [false_value]
```

예시

```python
aa = 0 bb = 1 if aa == 0 else aa print(f'{aa=} {bb=}') # aa=0 bb=1

aa = 60 bb = 1 if aa == 0 else aa print(f'{aa=} {bb=}') # aa=60 bb=60
```





이상 파이썬 삼항 연산자에 대해 알아보았습니다.

대괄호 ctrl+ } 자동 들여쓰기 맞춤

# if-elif문

```python
score = int( input("점수를 입력하세요"))


if score  >= 90 :
    print("A")
elif score  >= 80 :
    print("B")
elif score  >= 70 :
    print("C")
elif score  >= 60 :
    print("D")
else :
    print("F")

print("학점입니다.")
```



ctrl+d 같은 단어 블록지정 alt로 선택 하면 같이 움직인다.

eval 문자열을 python코드로 바꿔주는 함수

for문 변수 사용하지 않을떄 _ 사용



# for문

```python
for 변수 in 리스트(또는 튜플, 문자열):
    수행할 문장1
    수행할 문장2
    ...
```



## 다양한 for문 사용

```python
>>> a = [(1,2), (3,4), (5,6)]
>>> for (first, last) in a:
...     print(first + last)
...
3
7
11
```





## 2중 for문



```python
for i in range(0,3) :
    for k in range(0,2) :
        print(f"파이썬은 꿀잼입니다.^^ (i값 : {i}, k값 : {k})")
```



## 구구단 출력

```python
for i in range(1,10) :
    print(f"{i}단")
    for k in range(1,10) :
        print(f"구구단 {i} X {k} = {i*k}")
```



# while문

```python
while <조건문>:
    <수행할 문장1>
    <수행할 문장2>
    <수행할 문장3>
    ...
```



## 강제로 빠져나가기

```
>>> coffee = 10
>>> money = 300
>>> while money:
...     print("돈을 받았으니 커피를 줍니다.")
...     coffee = coffee -1
...     print("남은 커피의 양은 %d개입니다." % coffee)
...     if coffee == 0:
...         print("커피가 다 떨어졌습니다. 판매를 중지합니다.")
...         break
```



## 맨 처음으로 돌아가기

```python
>>> a = 0
>>> while a < 10:
...     a = a + 1
...     if a % 2 == 0: continue
...     print(a)
...
1
3
5
7
9
```



# 자료형

## 리스트 list  [  a, b ] 

```
리스트명 = [요소1, 요소2, 요소3, ...]
```

```python
 a = [1, 2, 3, ['a', 'b', 'c']]
```

## 리스트 연산

```python
a = [1, 2, 3]
b = [4, 5, 6]
a + b

[1, 2, 3, 4, 5, 6]
```

### slicing

aa = [10, 20, 30, 40, 50]

aa[-2, -1] 끝에서 두번째까지 => 50,40

aa[-3, -2]   							   =>  40 ,30, 20

### list 함수

| 메서드                   | 설명                                                         |
| ------------------------ | ------------------------------------------------------------ |
| append(값)append(리스트) | 리스트 끝에 값을 추가, 리스트[len(리스트):] = [값]과 같음리스트를 넣으면 리스트 안에 리스트가 들어감 |
| extend(리스트)           | 리스트 끝에 다른 리스트 연결, 리스트[len(리스트):] = [값, 값]과 같음 |
| insert(인덱스, 값)       | 리스트의 특정 인덱스에 값을 추가                             |
| pop()pop(인덱스)         | 리스트의 마지막 값을 삭제한 뒤 삭제한 값을 반환인덱스를 지정하면 해당 인덱스의 값을 삭제한 뒤 삭제한 값을 반환, del 리스트[인덱스]와 같음 |
| remove(값)               | 리스트에서 특정 값을 삭제                                    |
| index(값)                | 리스트에서 특정 값의 인덱스를 구함                           |
| count(값)                | 리스트에서 특정 값의 개수를 구함                             |
| reverse()                | 리스트에서 값의 순서를 반대로 뒤집음                         |
| sort()sort(reverse=True) | 리스트의 값을 작은 순서대로 정렬(오름차순)reverse=True는 큰 순서대로 정렬(내림차순) |
| clear()                  | 리스트의 모든 값을 삭제, del a[:]와 같음                     |
| copy()                   | 리스트를 복사하여 새 리스트 생성                             |



## 튜플 tupple	(  a, b  )  ==수정불가능==

```
튜플명 = (요소1, 요소2, 요소3, ...)
```

```
aa = ('a', 'b', ('ab', 'cd'))
```

리스트에서 사용하는 함수에서 수정하는것 제외 사용가능



## 딕셔너리  dict  { key : value } 		--제이슨 같은형식

{} 만들은것보다 dict() 만드는게 함수를 더 많이 사용할수 있다. 

순서가 없다.

중복은 제거하고 만들어준다.

항상 key값은 문자열의 형태

```python
dict = {"a ": 100, "b": 200, "c": 300, "d": [400, 500, 600]}

dict["a"] 			=> 100

dict["d"] [2]          => 600   
```

### 딕셔너리에서 Key 사용해 Value 얻기

```
>>> grade = {'pey': 10, 'julliet': 99}
>>> grade['pey']
10
>>> grade['julliet']
99
```

#### Key 리스트 만들기(keys)

```
>>> a = {'name': 'pey', 'phone': '0119993323', 'birth': '1118'}
>>> a.keys()
dict_keys(['name', 'phone', 'birth'])
```

#### Value 리스트 만들기(values)

```
>>> a.values()
dict_values(['pey', '0119993323', '1118'])
```

#### Key, Value 쌍 얻기(items)

```
>>> a.items()
dict_items([('name', 'pey'), ('phone', '0119993323'), ('birth', '1118')])
```



#### 두 개의 리스트를 묶기

zip은 두 개의 리스트를 서로 묶어줄 때 사용합니다.

```
name = ['merona', 'gugucon']
price = [500, 1000]

z = zip(name, price)
print(list(z))



[('merona', 500), ('gugucon', 1000)]
```

